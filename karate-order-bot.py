
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.filters import Command
from dotenv import load_dotenv
from datetime import datetime

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === ENV ===
load_dotenv()
BOT_TOKEN = os.getenv("7222903418:AAEmFCewivYsudEXTDEVdDAUrRNtKVDvuSo")
ADMIN_USERNAME = "@nikibelka"

# === GOOGLE SHEETS ===
def save_to_google_sheets(order, username):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("karate-orders-bot-72d967ae279a.json", scope)
    client = gspread.authorize(creds)

    sheet = client.open("Karate Orders").sheet1
    sheet.append_row([
        datetime.now().strftime("%Y-%m-%d %H:%M"),
        username,
        order['brand'],
        order['model'],
        order['jacket_size'],
        order['pants_size'],
        "–î–∞" if order['jka_patch'] else "–ù–µ—Ç",
        order['name_embroidery'] or "–ù–µ—Ç",
        order['label']
    ])

# === TELEGRAM BOT ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")]],
    resize_keyboard=True
)

order_data = {}
brands = ["Hayate", "Shureido", "Hirota", "Takaido"]
current_field = {}

@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —è–ø–æ–Ω—Å–∫–æ–≥–æ –∫–∏–º–æ–Ω–æ –¥–ª—è –∫–∞—Ä–∞—Ç—ç. –ù–∞–∂–º–∏ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=main_menu
    )

@router.message(F.text == "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: Message):
    order_data[message.chat.id] = {}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥:", reply_markup=create_brand_buttons())
    current_field[message.chat.id] = 'brand'

def create_brand_buttons():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=brand)] for brand in brands],
        resize_keyboard=True
    )

@router.message()
async def handle_message(message: Message):
    user_id = message.chat.id
    if user_id not in order_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    field = current_field.get(user_id)
    if not field:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu)
        return

    if field == 'brand':
        if message.text not in brands:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        order_data[user_id]['brand'] = message.text
        current_field[user_id] = 'model'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∫–∏–º–æ–Ω–æ:")

    elif field == 'model':
        order_data[user_id]['model'] = message.text
        current_field[user_id] = 'jacket_size'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫—É—Ä—Ç–∫–∏:")

    elif field == 'jacket_size':
        order_data[user_id]['jacket_size'] = message.text
        current_field[user_id] = 'pants_size'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ç–∞–Ω–æ–≤:")

    elif field == 'pants_size':
        order_data[user_id]['pants_size'] = message.text
        current_field[user_id] = 'jka_patch'
        markup = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
            resize_keyboard=True
        )
        await message.answer("–ù—É–∂–Ω–∞ –ª–∏ –Ω–∞—à–∏–≤–∫–∞ JKA?", reply_markup=markup)

    elif field == 'jka_patch':
        order_data[user_id]['jka_patch'] = message.text == "–î–∞"
        current_field[user_id] = 'name_embroidery'
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤—ã—à–∏–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'):")

    elif field == 'name_embroidery':
        name = message.text
        order_data[user_id]['name_embroidery'] = None if name.lower() == '–Ω–µ—Ç' else name
        current_field[user_id] = 'label'
        markup = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="JKA"), KeyboardButton(text="WKF"), KeyboardButton(text="–ë–µ–∑ –ª–µ–π–±–ª–∞")]],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–π–±–ª:", reply_markup=markup)

    elif field == 'label':
        order_data[user_id]['label'] = message.text
        current_field[user_id] = None
        order = order_data[user_id]

        summary = (
            f"–í–∞—à –∑–∞–∫–∞–∑:
"
            f"–ë—Ä–µ–Ω–¥: {order['brand']}
"
            f"–ú–æ–¥–µ–ª—å: {order['model']}
"
            f"–†–∞–∑–º–µ—Ä –∫—É—Ä—Ç–∫–∏: {order['jacket_size']}
"
            f"–†–∞–∑–º–µ—Ä —à—Ç–∞–Ω–æ–≤: {order['pants_size']}
"
            f"–ù–∞—à–∏–≤–∫–∞ JKA: {'–î–∞' if order['jka_patch'] else '–ù–µ—Ç'}
"
            f"–ò–º—è –¥–ª—è –≤—ã—à–∏–≤–∫–∏: {order['name_embroidery'] or '–ù–µ—Ç'}
"
            f"–õ–µ–π–±–ª: {order['label']}"
        )

        await message.answer(summary)
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=main_menu)
        await bot.send_message(chat_id=ADMIN_USERNAME, text=f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username}:

{summary}")
        save_to_google_sheets(order, message.from_user.username or "–ë–µ–∑ username")

dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
